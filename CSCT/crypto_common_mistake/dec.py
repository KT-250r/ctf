import gmpy2
from Crypto.Util.number import long_to_bytes

gmpy2.get_context().precision=2048
n = '0xa96e6f96f6aedd5f9f6a169229f11b6fab589bf6361c5268f8217b7fad96708cfbee7857573ac606d7569b44b02afcfcfdd93c21838af933366de22a6116a2a3dee1c0015457c4935991d97014804d3d3e0d2be03ad42f675f20f41ea2afbb70c0e2a79b49789131c2f28fe8214b4506db353a9a8093dc7779ec847c2bea690e653d388e2faff459e24738cd3659d9ede795e0d1f8821fd5b49224cb47ae66f9ae3c58fa66db5ea9f73d7b741939048a242e91224f98daf0641e8a8ff19b58fb8c49b1a5abb059f44249dfd611515115a144cc7c2ca29357af46a9dc1800ae9330778ff1b7a8e45321147453cf17ef3a2111ad33bfeba2b62a047fa6a7af0eef'
n = int(n, 0)    
e = '0x23'
e = int(e, 0)
c  = '0x79834ce329453d3c4af06789e9dd654e43c16a85d8ba0dfa443aefe1ab4912a12a43b44f58f0b617662a459915e0c92a2429868a6b1d7aaaba500254c7eceba0a2df7144863f1889fab44122c9f355b74e3f357d17f0e693f261c0b9cefd07ca3d1b36563a8a8c985e211f9954ce07d4f75db40ce96feb6c91211a9ff9c0a21cad6c5090acf48bfd88042ad3c243850ad3afd6c33dd343c793c0fa2f98b4eabea399409c1966013a884368fc92310ebcb3be81d3702b936e7e883eeb94c2ebb0f9e5e6d3978c1f1f9c5a10e23a9d3252daac87f9bb748c961d3d361cc7dacb9da38ab8f2a1595d7a2eba5dce5abee659ad91a15b553d6e32d8118d1123859208'
c = int(c, 0)


print(n, "\n", e, "\n", c,"\n")


# from pwn import *

# # https://stackoverflow.com/questions/4798654/modular-multiplicative-inverse-function-in-python
# def egcd(a, b):
#     if a == 0:
#         return (b, 0, 1)
#     else:
#         g, y, x = egcd(b % a, a)
#         return (g, x - (b // a) * y, y)

# def modinv(a, m):
#     g, x, y = egcd(a, m)
#     if g != 1:
#         raise Exception('modular inverse does not exist')
#     else:
#         return x % m

# def Rsa3():
#     # c = 7156923147683598511941322234348374257824801144959548472260122181043302569808456868098080013431161113473226045505904631429034106735162156403185043220679825880304375615049363791253440398923179410157085380702574796957408667182767820605242245624685788695276429341725674930892240839652137502252185799777749430475206807223444608289980591370843296286
#     # n = 13472553539302121922625205902448980751013302117459853918241125141584975393421090986279611937663653868655412973688116708271801056267834039797779057942597659629028933471424340273522604162308901962488192138896559237789185916090084387581390618195119026158813509845391000528289184852040272639465107183985995228431970008745124937624597090437536725943
#     # e = 65537
#     phi=13472553501563342493051168188439537546308090510715023360847727963083544652953770910650259531807452422482905699242351952459317060754251948708639486210268622762891547647485822532638013611140493645851976561516432676939380454233956972688709789220437062835799742901762095094277187103810136229477134709914835520504638840010991821561272383569920000000    
    
#     d = modinv(e, phi)
#     m = pow(c, d, n)

#     flag = unhex(hex(m)[2:])

#     print(flag)


# if __name__ == '__main__':
#     Rsa3()